services:
  nginx:
    image: nginx:1.25-alpine
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: ingress
    networks:
      - appnet
    deploy:
      placement:
        constraints:
          - node.role == manager
      replicas: 1

  api:
    image: hw5_api:latest
    # If you want the stack to build the API image from the repo, replace 'image' with a 'build' context.
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/postgres
      - PORT=8000
    networks:
      - appnet
    depends_on:
      - db
    deploy:
      placement:
        constraints:
          - node.role == manager
      replicas: 2
      restart_policy:
        condition: on-failure
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/healthz || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3

  db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_DB=postgres
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - appnet
    deploy:
      placement:
        # Prefer a specific worker using a node label. Add the label on the desired worker:
        #   docker node update --label-add db=true <worker-node>
        constraints:
          - node.labels.db == true
      replicas: 1
      restart_policy:
        condition: on-failure
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB} -h localhost || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  # Bind the volume to the worker host path so DB data is stored at /var/lob/postgres-data on the worker hosts.
  pgdata:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/postgres-data

networks:
  appnet:
    driver: overlay
